-- Database Name: BGT_Billboards
USE BGT_Billboards;

-- Create Table Statements (Commented out because they already exist)
-- CREATE TABLE Organization (
--     org_id INT PRIMARY KEY,
--     type NVARCHAR(50),
--     org_name NVARCHAR(500)
-- );

-- CREATE TABLE Content (
--     content_id INT PRIMARY KEY,
--     type NVARCHAR(50),
--     description NVARCHAR(500),
--     org_id INT FOREIGN KEY REFERENCES Organization(org_id)
-- );

-- CREATE TABLE Billboard (
--     billboard_id INT PRIMARY KEY,
--     latitude DECIMAL(8,6),
--     longitude DECIMAL (9,6),
--     neighborhood NVARCHAR(100),
--     sensor_id INT NOT NULL UNIQUE
-- );

-- CREATE TABLE Booking (
--     booking_id INT PRIMARY KEY ,
--     quote_price DECIMAL (6,2),
--     start_datetime DATETIME2,
--     end_datetime DATETIME2,
--     content_id INT FOREIGN KEY REFERENCES Content(content_id),
--     billboard_id INT FOREIGN KEY REFERENCES Billboard(billboard_id),
--     CHECK (DATEPART(MINUTE, start_datetime) = 0 AND DATEPART(SECOND, start_datetime) = 0 AND DATEPART(NANOSECOND, start_datetime) = 0),
--     CHECK (DATEPART(MINUTE, end_datetime) = 0 AND DATEPART(SECOND, end_datetime) = 0 AND DATEPART(NANOSECOND, end_datetime) = 0)
-- );

-- CREATE TABLE Sensor_Reading (
--     timestamp DATETIME2,
--     ped_south INT,
--     ped_north INT,
--     bike_south INT,
--     bike_north INT,
--     sensor_id INT FOREIGN KEY REFERENCES Billboard(sensor_id),
--     booking_id INT FOREIGN KEY REFERENCES Booking(booking_id),
--     PRIMARY KEY (timestamp, sensor_id)
-- );

-- View Table Statements
SELECT * FROM Organization;
SELECT * FROM Content;
SELECT * FROM Billboard;
SELECT * FROM Booking;
SELECT * FROM Sensor_Reading;

-- 10 SQL Queries

-- Q1) Which organization has booked the highest number of distinct advertising slots
-- across all billboards in June 2025? 
WITH OrgBookings as (
    SELECT 
        o.org_name,
        COUNT(o.org_name) AS slots
    FROM Organization o
        JOIN Content c ON o.org_id = c.org_id
        JOIN Booking b ON c.content_id = b.content_id
    WHERE MONTH(b.start_datetime) = 6 AND YEAR(b.start_datetime) = 2025
    GROUP BY o.org_name
),
Ranked AS (
    SELECT 
        org_name,
        slots,
        RANK() OVER (ORDER BY slots DESC) AS rank
    FROM OrgBookings
)
SELECT * 
FROM Ranked
WHERE rank = 1;

-- Q2) What are the top 3 billboards ranked by their total recorded bicycle traffic for 2025?
WITH BikeTraffic AS (
    SELECT
        b.billboard_id,
        b.neighborhood,
        SUM(sr.bike_north + sr.bike_south) AS total
    FROM Sensor_Reading sr
    JOIN Billboard b on sr.sensor_id = b.sensor_id  
    WHERE YEAR(sr.timestamp) = 2025
    GROUP BY b.billboard_id, b.neighborhood
),
RankedBikeTraffic AS (
    SELECT *, RANK() OVER (ORDER BY total DESC) AS rank
    FROM BikeTraffic
)
SELECT * 
FROM RankedBikeTraffic
WHERE rank <= 3;

-- Q3) What is the average price for a 1-hour booking slot for billboards in Downtown
-- during morning peak hours (7 am - 9 am) versus evening peak hours (4pm - 6pm)?
WITH DowntownBookings as (
    SELECT 
        b.booking_id, 
        b.quote_price, 
        b.start_datetime, 
        CASE 
            WHEN DATEPART(HOUR, b.start_datetime) BETWEEN 7 AND 8 THEN 'Morning (7-9AM)'
            WHEN DATEPART(HOUR, b.start_datetime) BETWEEN 16 AND 17 THEN 'Evening (4-6PM)'
            ELSE 'Off Peak'
        END AS time_period
    FROM Booking b
    JOIN Billboard bill ON b.billboard_id = bill.billboard_id
    WHERE bill.neighborhood = 'Downtown'
)
SELECT time_period, AVG(quote_price) as avg_price
FROM DowntownBookings
GROUP BY time_period;

-- Q4) List all organizations classified as non-profit that have active or upcoming bookings.
SELECT DISTINCT o.org_name
FROM Organization o 
JOIN Content c ON o.org_id = c.org_id
JOIN Booking b on c.content_id = b.content_id
WHERE o.type = 'non-profit' AND
    (
     -- currently active bookings
    b.start_datetime <= GETDATE()
    AND b.end_datetime >= GETDATE()
    -- upcoming
    OR b.start_datetime > GETDATE()
    )
ORDER BY org_name ASC;


-- Q5) On average, which direction sees more pedestrian traffic daily across 
-- all sensors in Univeristy District?
WITH PedCount AS (
    SELECT 
        CAST(sr.timestamp AS DATE) AS date,
        SUM(sr.ped_south) AS south,
        SUM(sr.ped_north) as north
    FROM Billboard b
    JOIN Sensor_Reading sr on b.sensor_id = sr.sensor_id
    WHERE b.neighborhood = 'University District'
    GROUP BY CAST(sr.timestamp AS DATE)
)
-- columns that show both average values
SELECT
    AVG(south) as avg_daily_south,
    AVG(north) as avg_daily_north
FROM PedCount;
-- shows answer as text
-- SELECT 
--     CASE 
--         WHEN AVG(south) > AVG(north) THEN 'South has more pedestrian traffic'
--         WHEN AVG(south) < AVG(north) THEN 'North has more pedestrian traffic'
--         ELSE 'Tie'
--     END AS Answer
-- FROM PedCount;

-- Q6) What was the total count of northbound cyclists and southbound pedestrians 
-- between 6am and 6pm on June 9th?
SELECT 
    SUM(bike_north) AS TotalNorthboundCyclists, 
    SUM(ped_south) AS TotalSouthboundPedestrians
FROM Sensor_Reading
WHERE 
    timestamp >= '2025-06-09 06:00:00' 
    AND timestamp < '2025-06-09 18:00:00';

-- Q7) What percentage of total traffic in Seattle Center during peak evening commute (4pm - 6pm) 
-- is pedestrian versus cyclist?
SELECT 
    b.neighborhood, 
    SUM(SR.ped_south + SR.ped_north) AS TotalPedestrianTraffic, 
    SUM(SR.bike_south + SR.bike_north) AS TotalCyclistTraffic,
    (SUM(SR.ped_south + SR.ped_north) * 100.0 / SUM(SR.ped_south + SR.ped_north + SR.bike_south + SR.bike_north)) 
        AS PedestrianPercentage,
    (SUM(SR.bike_south + SR.bike_north) * 100.0 / SUM(SR.ped_south + SR.ped_north + SR.bike_south + SR.bike_north)) 
        AS CyclistPercentage
FROM Sensor_Reading AS sr
    JOIN Billboard AS b 
    ON sr.sensor_id = b.sensor_id
WHERE b.neighborhood = 'Seattle Center' 
    AND DATEPART(hour, sr.timestamp) BETWEEN 16 AND 18
GROUP BY b.neighborhood;

-- Q8) Rank all organizations by their total spending on bookings
SELECT 
    O.org_name, 
    SUM(B.quote_price) AS TotalSpending, 
    RANK() OVER (ORDER BY SUM(B.quote_price) DESC) AS SpendingRank
FROM Booking AS b
    JOIN Content AS c ON b.content_id = c.content_id
    JOIN Organization AS o ON c.org_id = o.org_id
GROUP BY o.org_name
ORDER BY SpendingRank;

-- Q9) List pairs of bookings that are for the same billboard and by the same organization, 
-- where one booking starts on the same day the previous one ends.
SELECT 
    o.org_name, 
    bb.neighborhood, 
    b1.booking_id AS 'first_booking_id', 
    b1.end_datetime AS 'first_booking_end', 
    b2.booking_id AS 'second_booking_id', 
    b2.start_datetime AS 'second_booking_start'
FROM Booking AS b1
    JOIN Booking AS b2 ON b1.billboard_id = b2.billboard_id AND b1.booking_id <> b2.booking_id
    JOIN Content AS c1 ON b1.content_id = c1.content_id
    JOIN Content AS c2 ON b2.content_id = c2.content_id
    JOIN Organization AS o ON c1.org_id = o.org_id
    JOIN Billboard AS bb ON b1.billboard_id = bb.billboard_id
WHERE c1.org_id = c2.org_id AND B2.start_datetime = B1.end_datetime;

-- Q10) Which hour on June 8th had the absolute highest combined count of pedestrians and cyclists?
WITH RankedTraffic AS (
    SELECT 
        DATEPART(hour, timestamp) AS HourOfDay, 
        SUM(ped_south + ped_north + bike_south + bike_north) AS TotalTraffic, 
        RANK() OVER (ORDER BY SUM(ped_south + ped_north + bike_south + bike_north) DESC) as TrafficRank
    FROM Sensor_Reading
    WHERE CAST(timestamp AS DATE) = '2025-06-08'
    GROUP BY DATEPART(hour, timestamp)
)
SELECT HourOfDay AS BusiestHour, TotalTraffic
FROM RankedTraffic
WHERE TrafficRank = 1;
